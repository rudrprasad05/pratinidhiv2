generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  SUPERADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  address                String?
  town                   String?
  country                String?
  phone                  String?
  email                  String    @unique
  emailVerified          DateTime?
  emailVerificationToken String?   @unique
  image                  String?
  hashedPassword         String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  conversationIds        String[]  @db.ObjectId
  role                   Role      @default(USER)
  accounts               Account[]
  invite Invitation?
  branch                 Branch?   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId               String?    @db.ObjectId
  posts Post[]
  comments Comment[]

  // websites               Website[]
  // media Media[]
  // resetPasswordToken String? @unique
  // resetPasswordTokenExpiry DateTime?
}

model Branch {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  branchName String?
  profilePic String?
  banner String?
  members    User[]
  leaderId   String   @db.ObjectId
  phone      String?
  email      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String           @unique
  userId String? @db.ObjectId @unique
  user   User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role     Role             @default(ADMIN)

}


model Post {
    id              String     @id @default(auto()) @map("_id") @db.ObjectId
    createdAt       DateTime   @default(now())
    published       Boolean    @default(false)
    name            String
    previewImage    String?
    description     String     @default("")
    content         String     @default("[]")
    visits          Int        @default(0)
    likes           Int        @default(0)
    tags              String?
    comments        Comment[]
    authorId        String     @db.ObjectId
    author          User       @relation(fields: [authorId], references: [id])
    shareURL        String       @unique @default(uuid())
  @@unique([name, authorId])
}
model Comment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  message       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isModerated   Boolean
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @db.ObjectId
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String     @db.ObjectId
  
}


model Category{
    id                String    @id @default(auto()) @map("_id") @db.ObjectId
    authorID          String    @db.ObjectId
    authorName        String?
    name              String?
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
}
